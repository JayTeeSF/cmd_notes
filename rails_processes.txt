*Motivation*:

You know your server is having trouble, and you're trying to get at the root cause.
Now, you've likely started generating some kind of custom memory.log to capture the memory usage (and timing information) for each request that completes (along with its transaction-ID, of course, so you can tie it back to the entry in your production.log file)

But for real-time trouble-shooting you want to know what's going on, on your servers, now!

What are those unicorn- or passenger-workers actually doing with all that memory?!
(Especially if, some other process (OOM-killer, unicorn master, etc) kill them because they get out of control.
...such that they never record their doings in your log file(s))


*Solution*:
    Thanks to a (somewhat outdated) article by Dave Thomas:
    http://pragdave.blogs.pragprog.com/pragdave/2008/11/trivial-request-logging-for- rails.htm
    
    Update your application_controller with a before & after (or around) filter to update your process-listing
    (And, parenthetically, "ps auxwww" (vs. "ps -eafwww", for example) is a great way to see what's running and how-much memory it's using.

    The snippet below shows how I updated each worker process's title during & after each Rails-request:
    (Per the Ruby 2 docs: http://ruby-doc.org/core-2.2.2/Process.html#method-c-setproctitle)
    
def set_process_name_from_request
  Process.setproctitle("#{Whatever_Your_Process_currently_says} -- #{request.path[0,128]}")
end

# an astrisk is appended when the process becomes idle
def unset_process_name_from_request
  Process.setproctitle("#{Whatever_Your_Process_currently_says} -- #{request.path[0,128]}*")
end

Now when I ps auxwww, I see something quite useful like:
USER       PID %CPU %MEM    VSZ   RSS    TTY  STAT START   TIME COMMAND
my_user    342 2.3   9.5 1425844 366828  ?    Sl   Aug11   3:37 WhateverYourProcessSays -- /controller/some_action
my_user    342 2.3   9.5 1425844 366828  ?    Sl   Aug11   3:37 WhateverYourProcessSays -- /controller/other_action*
