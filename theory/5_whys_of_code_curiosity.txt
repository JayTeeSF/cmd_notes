"Hansei*", cried Nadeem, for the umpteenth time.
('Hansei' is Japanese "Lean"-speak for 'self-reflection' -- a concept our software team applies in its journey toward 'Kaizen' or 'continual improvement'.)

So let's engage in some hansei in an effort to analyze the root-cause of a recent incident:

(1) Why?
Because, once again, the team released a poor-quality solution -- due to an obvious misstep.
More specifically, there were two types of display-limits -- spanning a total of 5 limits. Unfortunately, the solution we delivered only addressed one of the two types.

(2) Why?
We completely forgot about the type-2 display-limits.

(3) Why?
"A Lack of CodeCuriosity", says Nadeem.

(4) Why?
Because the first line of code in that 100-line file we modified said something to the effect of, "If display_limit_type2 ..."
(Meaning: any programmer who actually took the time to understand (pron: read) the code would have remembered the type2-limit(s).)

(5) Why? (...allow me to dig a bit deeper)
I realized that when I pair-program, particularly on complex parts of our system, I fall prey to a weakened-sense of responsibility; I trust the assumptions of my co-worker,
and challenge them less. What makes this particularly troublesome is that it represents a normal human propensity that undermines pair-programming. (Not necessarily a reason to avoid it,
but, certainly something to vigilantly fight-against while pairing.)

For more on this notion, checkout an article (http://bit.ly/i51aRh) which hypothesizes that those who share responsibility for a task exert less cognitive effort than those who are solely responsible.
